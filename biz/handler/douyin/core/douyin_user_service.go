// Code generated by hertz generator.

package core

import (
	"context"

	"BiteDans.com/tiktok-backend/biz/dal/model"
	core "BiteDans.com/tiktok-backend/biz/model/douyin/core"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// RegisterUser .
// @router /douyin/user/register/ [POST]
func RegisterUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core.DouyinUserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core.DouyinUserRegisterResponse)

	user := new(model.User)
	user.Username = req.Username
	user.Password = req.Password

	var findUser int64
	if findUser = model.FindUserByUsername(user); findUser != 0 {
		resp.StatusCode = -1
		resp.StatusMsg = "Username has been used"
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	if err = model.RegisterUser(user); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Failed to register user"
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}

	resp.StatusCode = 0
	resp.StatusMsg = "User registered successfully"
	resp.UserId = int64(user.ID)
	resp.Token = "token"

	c.JSON(consts.StatusOK, resp)
}

// UserInfo .
// @router /douyin/user [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core.DouyinUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core.DouyinUserResponse)

	if _error := c.Errors.Last(); _error != nil {
		resp.StatusCode = -1
		resp.StatusMsg = _error.Error()
		resp.User = nil

		c.JSON(consts.StatusUnauthorized, resp)
		return
	}

	resp.StatusCode = 0
	resp.StatusMsg = "User info retrieved successfully"
	resp.User = &core.User{
		ID:            666,
		Name:          "Bob",
		FollowCount:   1000,
		FollowerCount: 5999,
		IsFollow:      true,
	}

	c.JSON(consts.StatusOK, resp)
}
