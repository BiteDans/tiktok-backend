// Code generated by hertz generator.

package interaction

import (
	"context"

	"BiteDans.com/tiktok-backend/biz/dal/model"
	"BiteDans.com/tiktok-backend/biz/model/douyin/core/user"
	"BiteDans.com/tiktok-backend/pkg/constants"
	"BiteDans.com/tiktok-backend/pkg/utils"
	"github.com/cloudwego/hertz/pkg/common/hlog"

	interaction "BiteDans.com/tiktok-backend/biz/model/douyin/extra/interaction"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// FavoriteInteraction .
// @router /douyin/favorite/action/ [POST]
func FavoriteInteraction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.DouyinFavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(interaction.DouyinFavoriteActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// FavoriteList .
// @router /douyin/favorite/list/ [GET]
func FavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.DouyinFavoriteListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(interaction.DouyinFavoriteListResponse)

	c.JSON(consts.StatusOK, resp)
}

// CommentInteraction .
// @router /douyin/comment/action/ [POST]
func CommentInteraction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.DouyinCommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(interaction.DouyinCommentActionResponse)

	var user_id uint
	if user_id, err = utils.GetIdFromToken(req.Token); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Invalid token"
		resp.Comment = nil

		c.JSON(consts.StatusUnauthorized, resp)
		return
	}

	_user := new(model.User)
	if err = model.FindUserById(_user, user_id); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "User id does not exist"
		resp.Comment = nil
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	_video := new(model.Video)
	if err = model.FindVideoById(_video, uint(req.VideoId)); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Video id does not exist"
		resp.Comment = nil
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	if req.ActionType != constants.POST_COMMENT && req.ActionType != constants.DELETE_COMMENT {
		resp.StatusCode = -1
		resp.StatusMsg = "Fail to get action type"
		resp.Comment = nil
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	if req.ActionType == constants.POST_COMMENT {
		comment := new(model.Comment)
		comment.UserId = int64(user_id)
		comment.VideoId = req.VideoId
		comment.Content = req.CommentText
		if err = model.CreateComment(comment); err != nil {
			resp.StatusCode = -1
			resp.StatusMsg = "Failed to create comment"
			resp.Comment = nil
			c.JSON(consts.StatusInternalServerError, resp)

			hlog.Error("Failed to create comment into database")
			return
		}
		resp.StatusCode = 0
		resp.StatusMsg = "comment on video successfully!"
		resp.Comment = &interaction.Comment{
			ID:         0,
			User:       nil,
			Content:    comment.Content,
			CreateDate: comment.CreatedAt.Format("01-02"),
		}
		c.JSON(consts.StatusOK, resp)
	}

	//Delete comment
	comment := new(model.Comment)
	if comment, err = model.FindCommentById(req.CommentId); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Comment id does not exist"
		resp.Comment = nil
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	if comment.UserId != (int64(user_id)) {
		resp.StatusCode = -1
		resp.StatusMsg = "You can not delete comment that does not belong to you"
		resp.Comment = nil
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	if err = model.DeleteComment(comment); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Fail to delete comment"
		resp.Comment = nil
		c.JSON(consts.StatusInternalServerError, resp)
		hlog.Error("Failed to delete comment in database")
		return
	}
	resp.StatusCode = 0
	resp.StatusMsg = "delete comment successfully"
	resp.Comment = nil

	c.JSON(consts.StatusOK, resp)
}

// CommentList .
// @router /douyin/comment/list/ [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.DouyinCommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(interaction.DouyinCommentListResponse)

	var user_id uint
	if user_id, err = utils.GetIdFromToken(req.Token); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Invalid token"
		resp.CommentList = nil

		c.JSON(consts.StatusUnauthorized, resp)
		return
	}

	_user := new(model.User)
	if err = model.FindUserById(_user, user_id); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "User id does not exist"
		resp.CommentList = nil
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	_video := new(model.Video)
	if err = model.FindVideoById(_video, uint(req.VideoId)); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Video id does not exist"
		resp.CommentList = nil
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	var _comments []*model.Comment
	_comments, err = model.FindCommentsByVideoId(req.VideoId)
	if err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Failed to retrieve comments of the video"
		resp.CommentList = nil
		c.JSON(consts.StatusInternalServerError, resp)
		hlog.Error("Failed to query comments id with video id in database")
		return
	}

	resp.StatusCode = 0
	resp.StatusMsg = "Video comments retrieved successfully"
	resp.CommentList = []*interaction.Comment{}

	for _, comment := range _comments {
		the_user := new(model.User)
		if err = model.FindUserById(the_user, uint(comment.UserId)); err != nil {
			resp.StatusCode = -1
			resp.StatusMsg = "User id does not exist in comment"
			resp.CommentList = nil
			c.JSON(consts.StatusInternalServerError, resp)
			hlog.Error("The user with user id in comment is not exist")
			return
		}

		format_user := &user.User{
			ID:            int64(the_user.ID),
			Name:          the_user.Username,
			FollowCount:   int64(len(the_user.Followings)),
			FollowerCount: int64(len(the_user.Followers)),
			IsFollow:      false,
		}

		the_comment := &interaction.Comment{
			ID:         int64(comment.ID),
			User:       (*interaction.User)(format_user),
			Content:    comment.Content,
			CreateDate: comment.CreatedAt.Format("01-02"),
		}
		resp.CommentList = append(resp.CommentList, the_comment)
	}

	c.JSON(consts.StatusOK, resp)
}
