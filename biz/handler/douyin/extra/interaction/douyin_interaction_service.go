// Code generated by hertz generator.

package interaction

import (
	"context"

	"BiteDans.com/tiktok-backend/biz/dal/model"
	"BiteDans.com/tiktok-backend/biz/model/douyin/core/user"
	"BiteDans.com/tiktok-backend/biz/model/douyin/extra/interaction"
	"BiteDans.com/tiktok-backend/pkg/constants"
	"BiteDans.com/tiktok-backend/pkg/utils"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// FavoriteInteraction .
// @router /douyin/favorite/action/ [POST]
func FavoriteInteraction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.DouyinFavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(interaction.DouyinFavoriteActionResponse)

	var userId uint
	if userId, err = utils.GetIdFromToken(req.Token); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Invalid token"
		c.JSON(consts.StatusOK, resp)
		return
	}

	_user := new(model.User)
	if err = model.FindUserById(_user, userId); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "User id does not exist"
		c.JSON(consts.StatusOK, resp)
		return
	}

	_video := new(model.Video)
	if err = model.FindVideoById(_video, uint(req.VideoId)); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Video id does not exist"
		c.JSON(consts.StatusOK, resp)
		return
	}

	if req.ActionType != constants.LIKE_VIDEO && req.ActionType != constants.UNLIKE_VIDEO {
		resp.StatusCode = -1
		resp.StatusMsg = "Undefined action!"
		c.JSON(consts.StatusOK, resp)
		return
	}

	if req.ActionType == constants.LIKE_VIDEO {

		likedUserId, err := model.FindUserByVideo(req.VideoId)
		if err != nil {
			resp.StatusCode = -1
			resp.StatusMsg = "Failed to retrieve author id of the liked video"
			hlog.Errorf("Failed to retrieve author id of the liked video for: %s", err.Error())
			c.JSON(consts.StatusOK, resp)
			return
		}
		like := new(model.Like)
		like.UserId = int64(userId)
		like.VideoId = req.VideoId
		like.LikedUserId = likedUserId

		if err = model.IsVideoLiked(like); err == nil {
			resp.StatusCode = 0
			resp.StatusMsg = "Already liked the video"
			c.JSON(consts.StatusOK, resp)
			return
		}

		if err = model.LikeVideo(like); err != nil {
			resp.StatusCode = -1
			resp.StatusMsg = "Failed to like the video"
			c.JSON(consts.StatusOK, resp)
			hlog.Errorf("Failed to create like record into database for: %s", err.Error())
			return
		}

		resp.StatusCode = 0
		resp.StatusMsg = "Liked video successfully!"
		c.JSON(consts.StatusOK, resp)
		return

	}

	like := new(model.Like)
	like.UserId = int64(userId)
	like.VideoId = req.VideoId

	if err = model.IsVideoLiked(like); err != nil {
		resp.StatusCode = 0
		resp.StatusMsg = "Already unliked the video"
		c.JSON(consts.StatusOK, resp)
		return
	}

	if err = model.UnlikeVideo(like); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Failed to unlike the video"
		c.JSON(consts.StatusInternalServerError, resp)
		hlog.Errorf("Failed to delete like record into database for: %s", err.Error())
		return
	}

	resp.StatusCode = 0
	resp.StatusMsg = "Unliked video successfully!"
	c.JSON(consts.StatusOK, resp)
}

// FavoriteList .
// @router /douyin/favorite/list/ [GET]
func FavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.DouyinFavoriteListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(interaction.DouyinFavoriteListResponse)

	if _, err = utils.GetIdFromToken(req.Token); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Invalid token"
		resp.VideoList = nil
		c.JSON(consts.StatusOK, resp)
		return
	}

	_user := new(model.User)
	if err = model.FindUserById(_user, uint(req.UserId)); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "User id does not exist"
		resp.VideoList = nil
		c.JSON(consts.StatusOK, resp)
		return
	}

	var likedVideosId []*model.Like
	likedVideosId, err = model.FindLikedVideosIdByUserId(req.UserId)
	if err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Failed to retrieve liked videos ID"
		resp.VideoList = nil
		c.JSON(consts.StatusInternalServerError, resp)
		hlog.Errorf("Failed to query liked videos ID by user id in database for: %s", err.Error())
		return
	}

	resp.StatusCode = 0
	resp.StatusMsg = "Liked videos retrieved successfully"
	resp.VideoList = []*interaction.Video{}

	for _, likedVideoId := range likedVideosId {
		video := new(model.Video)
		if err = model.FindVideoById(video, uint(likedVideoId.VideoId)); err != nil {
			resp.StatusCode = -1
			resp.StatusMsg = "Liked video id does not exist"
			resp.VideoList = nil
			c.JSON(consts.StatusInternalServerError, resp)
			hlog.Errorf("Like video does not exist for: %s", err.Error())
			return
		}

		var likeCount int64
		if likeCount, err = model.GetVideoLikeCount(likedVideoId.VideoId); err != nil {
			resp.StatusCode = -1
			resp.StatusMsg = "Failed to get video like count"
			resp.VideoList = nil
			c.JSON(consts.StatusInternalServerError, resp)
			hlog.Errorf("Failed to get video like count from database for: %s", err.Error())
			return
		}

		var commentCount int64
		if commentCount, err = model.GetCommentCount(likedVideoId.VideoId); err != nil {
			resp.StatusCode = -1
			resp.StatusMsg = "Failed to get video comment count"
			resp.VideoList = nil
			c.JSON(consts.StatusInternalServerError, resp)
			hlog.Errorf("Failed to get video comment count from database for: %s", err.Error())
			return
		}

		theUser := new(model.User)
		if err = model.FindUserById(theUser, uint(video.AuthorId)); err != nil {
			resp.StatusCode = -1
			resp.StatusMsg = "Author of the video does not exist"
			resp.VideoList = nil
			c.JSON(consts.StatusInternalServerError, resp)
			hlog.Errorf("The user with author id of the video is not exist for: %s", err.Error())
			return
		}

		var isFollow bool
		if isFollow, err = model.GetFollowRelation(uint(req.UserId), theUser.ID); err != nil {
			resp.StatusCode = -1
			resp.StatusMsg = "Failed to get follow relation"
			resp.VideoList = nil
			c.JSON(consts.StatusInternalServerError, resp)
			hlog.Errorf("Failed to get follow relation for: %s", err.Error())
			return
		}

		userLikeReceivedCount, err := model.GetUserReceivedLikeCount(video.AuthorId)
		if err != nil {
			resp.StatusCode = -1
			resp.StatusMsg = "Cannot get user like count"
			resp.VideoList = nil
			c.JSON(consts.StatusInternalServerError, resp)
			hlog.Errorf("Cannot get user like count for: %s", err.Error())
			return
		}

		userLikeCount, err := model.GetUserLikeCount(video.AuthorId)
		if err != nil {
			resp.StatusCode = -1
			resp.StatusMsg = "Cannot get user received like count"
			resp.VideoList = nil
			c.JSON(consts.StatusInternalServerError, resp)
			hlog.Errorf("Cannot get user received like count for: %s", err.Error())
			return
		}

		userWorkCount, err := model.GetUserVideoCount(video.AuthorId)
		if err != nil {
			resp.StatusCode = -1
			resp.StatusMsg = "Cannot get user work count"
			resp.VideoList = nil
			c.JSON(consts.StatusInternalServerError, resp)
			hlog.Errorf("Cannot get user work count for: %s", err.Error())
			return
		}

		userAvatar, err := model.FindUserAvatar(video.AuthorId)
		if err != nil {
			userAvatar = constants.PROFILE_PIC_ADDR
		}
		userBackgroundImage, err := model.FindUserBackgroundImage(video.AuthorId)
		if err != nil {
			userBackgroundImage = constants.BACKGROUND_PIC_ADDR
		}

		formatUser := &user.User{
			ID:            int64(theUser.ID),
			Name:          theUser.Username,
			FollowCount:   int64(len(theUser.Followings)),
			FollowerCount: int64(len(theUser.Followers)),
			IsFollow:      isFollow,
			TotalFavorited: userLikeReceivedCount,
			WorkCount:	userWorkCount,
			FavoriteCount: userLikeCount,
			Signature: constants.SIGNATURE,
			BackgroundImage: userBackgroundImage,
			Avatar: userAvatar,
		}

		theLike := new(model.Like)
		theLike.UserId = req.UserId
		theLike.VideoId = int64(video.ID)

		theVideo := &interaction.Video{
			ID:            int64(video.ID),
			Author:        (*interaction.User)(formatUser),
			PlayUrl:       video.PlayUrl,
			CoverUrl:      video.CoverUrl,
			FavoriteCount: likeCount,
			CommentCount:  commentCount,
			IsFavorite:    true,
			Title:         video.Title,
		}
		resp.VideoList = append(resp.VideoList, theVideo)
	}

	c.JSON(consts.StatusOK, resp)
}

// CommentInteraction .
// @router /douyin/comment/action/ [POST]
func CommentInteraction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.DouyinCommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(interaction.DouyinCommentActionResponse)

	var userId uint
	if userId, err = utils.GetIdFromToken(req.Token); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Invalid token"
		resp.Comment = nil

		c.JSON(consts.StatusOK, resp)
		return
	}

	_user := new(model.User)
	if err = model.FindUserById(_user, userId); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "User id does not exist"
		resp.Comment = nil
		c.JSON(consts.StatusOK, resp)
		return
	}

	_video := new(model.Video)
	if err = model.FindVideoById(_video, uint(req.VideoId)); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Video id does not exist"
		resp.Comment = nil
		c.JSON(consts.StatusOK, resp)
		return
	}

	if req.ActionType != constants.POST_COMMENT && req.ActionType != constants.DELETE_COMMENT {
		resp.StatusCode = -1
		resp.StatusMsg = "Fail to get action type"
		resp.Comment = nil
		c.JSON(consts.StatusOK, resp)
		return
	}

	if req.ActionType == constants.POST_COMMENT {
		comment := new(model.Comment)
		comment.UserId = int64(userId)
		comment.VideoId = req.VideoId
		comment.Content = req.CommentText
		if err = model.CreateComment(comment); err != nil {
			resp.StatusCode = -1
			resp.StatusMsg = "Failed to create comment"
			resp.Comment = nil
			c.JSON(consts.StatusInternalServerError, resp)

			hlog.Error("Failed to create comment into database ", err.Error())
			return
		}
		resp.StatusCode = 0
		resp.StatusMsg = "comment on video successfully!"
		resp.Comment = &interaction.Comment{
			ID:         0,
			User:       nil,
			Content:    comment.Content,
			CreateDate: comment.CreatedAt.Format("01-02"),
		}
		c.JSON(consts.StatusOK, resp)
		return
	}

	//Delete comment
	comment := new(model.Comment)
	if comment, err = model.FindCommentById(req.CommentId); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Comment id does not exist"
		resp.Comment = nil
		c.JSON(consts.StatusOK, resp)
		return
	}

	if comment.UserId != (int64(userId)) {
		resp.StatusCode = -1
		resp.StatusMsg = "You can not delete comment that does not belong to you"
		resp.Comment = nil
		c.JSON(consts.StatusOK, resp)
		return
	}

	if err = model.DeleteComment(comment); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Fail to delete comment"
		resp.Comment = nil
		c.JSON(consts.StatusInternalServerError, resp)
		hlog.Error("Failed to delete comment in database ", err.Error())
		return
	}
	resp.StatusCode = 0
	resp.StatusMsg = "delete comment successfully"
	resp.Comment = nil

	c.JSON(consts.StatusOK, resp)
}

// CommentList .
// @router /douyin/comment/list/ [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction.DouyinCommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(interaction.DouyinCommentListResponse)

	var userId uint
	if userId, err = utils.GetIdFromToken(req.Token); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Invalid token"
		resp.CommentList = nil

		c.JSON(consts.StatusOK, resp)
		return
	}

	_user := new(model.User)
	if err = model.FindUserById(_user, userId); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "User id does not exist"
		resp.CommentList = nil
		c.JSON(consts.StatusOK, resp)
		return
	}

	_video := new(model.Video)
	if err = model.FindVideoById(_video, uint(req.VideoId)); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Video id does not exist"
		resp.CommentList = nil
		c.JSON(consts.StatusOK, resp)
		return
	}

	var _comments []*model.Comment
	_comments, err = model.FindCommentsByVideoId(req.VideoId)
	if err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Failed to retrieve comments of the video"
		resp.CommentList = nil
		c.JSON(consts.StatusInternalServerError, resp)
		hlog.Error("Failed to query comments id with video id in database ", err.Error())
		return
	}

	resp.StatusCode = 0
	resp.StatusMsg = "Video comments retrieved successfully"
	resp.CommentList = []*interaction.Comment{}

	for _, comment := range _comments {
		the_user := new(model.User)
		if err = model.FindUserById(the_user, uint(comment.UserId)); err != nil {
			resp.StatusCode = -1
			resp.StatusMsg = "User id does not exist in comment"
			resp.CommentList = nil
			c.JSON(consts.StatusInternalServerError, resp)
			hlog.Error("The user with user id in comment is not exist ", err.Error())
			return
		}

		userAvatar, err := model.FindUserAvatar(int64(the_user.ID))
		if err != nil {
			userAvatar = constants.PROFILE_PIC_ADDR
		}
		userBackgroundImage, err := model.FindUserBackgroundImage(int64(the_user.ID))
		if err != nil {
			userBackgroundImage = constants.BACKGROUND_PIC_ADDR
		}

		formatUser := &user.User{
			ID:            int64(the_user.ID),
			Name:          the_user.Username,
			FollowCount:   int64(len(the_user.Followings)),
			FollowerCount: int64(len(the_user.Followers)),
			IsFollow:      false,
			Signature: constants.SIGNATURE,
			BackgroundImage: userBackgroundImage,
			Avatar: userAvatar,
		}

		theComment := &interaction.Comment{
			ID:         int64(comment.ID),
			User:       (*interaction.User)(formatUser),
			Content:    comment.Content,
			CreateDate: comment.CreatedAt.Format("01-02"),
		}
		resp.CommentList = append(resp.CommentList, theComment)
	}

	c.JSON(consts.StatusOK, resp)
}
