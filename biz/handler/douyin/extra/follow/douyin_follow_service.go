// Code generated by hertz generator.

package follow

import (
	"context"

	"github.com/cloudwego/hertz/pkg/common/hlog"

	"BiteDans.com/tiktok-backend/biz/dal/model"
	"BiteDans.com/tiktok-backend/pkg/constants"
	"BiteDans.com/tiktok-backend/pkg/utils"

	follow "BiteDans.com/tiktok-backend/biz/model/douyin/extra/follow"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// FollowAction .
// @router /douyin/relation/action/ [POST]
func FollowAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req follow.DouyinRelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(follow.DouyinRelationActionResponse)
	curUserReq := req.Token
	curUserId, err := utils.GetIdFromToken(curUserReq)
	if err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Invalid token"
		c.String(consts.StatusUnauthorized, err.Error())
		return
	}

	curUser := new(model.User)
	if err := model.FindUserById(curUser, curUserId); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Currrent user id does not exist"

		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	toUser := new(model.User)
	if err := model.FindUserById(toUser, uint(req.ToUserId)); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Target user id does not exist"

		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	actionType := req.ActionType
	if actionType == constants.FOLLOW_ACTION {
		err = model.UserFollow(curUser, toUser)
	} else if actionType == constants.UNFOLLOW_ACTION {
		err = model.UserUnfollow(curUser, toUser)
	}
	if err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Failed to follow/unfollow target user"

		c.JSON(consts.StatusInternalServerError, resp)
		hlog.Errorf("Failed to create user record: %v", err)
		return
	}

	resp.StatusCode = 0
	if actionType == constants.FOLLOW_ACTION {
		resp.StatusMsg = "Followed Successfully"
	} else if actionType == constants.UNFOLLOW_ACTION {
		resp.StatusMsg = "Unfollowed Successfully"
	}

	c.JSON(consts.StatusOK, resp)
}

func GetFollowInfoByUsers(from_user *model.User, to_user *model.User, user_resp *follow.User) error {
	var err error
	user_resp.ID = int64(to_user.ID)
	user_resp.Name = to_user.Username
	user_resp.FollowCount = model.GetFollowCount(to_user)
	user_resp.FollowerCount = model.GetFollowerCount(to_user)
	if user_resp.IsFollow, err = model.GetFollowRelation(from_user.ID, to_user.ID); err != nil {
		return err
	}
	return nil
}

// FollowList .
// @router /douyin/relation/follow/list/ [GET]
func FollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req follow.DouyinRelationFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(follow.DouyinRelationFollowListResponse)
	/* get curUserId */
	var curUserId uint
	if curUserId, err = utils.GetIdFromToken(req.Token); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Invalid token"
		resp.UserList = nil

		c.JSON(consts.StatusUnauthorized, resp)
		return
	}

	curUser := new(model.User)
	if err = model.FindUserById(curUser, curUserId); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Current user id does not exist"
		resp.UserList = nil
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	/* get target User */
	targetUser := new(model.User)
	targetUserId := uint(req.UserId)
	if err = model.FindUserById(targetUser, targetUserId); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Target user id does not exist"
		resp.UserList = nil
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	var uList []*model.User

	if err = model.GetFollowListByUser(&uList, targetUser); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Failed to get follow list"
		resp.UserList = nil
		c.JSON(consts.StatusInternalServerError, resp)
		hlog.Errorf("Failed to get follow list: %v", err)
		return
	}

	var respList []*follow.User
	for _, u := range uList {
		userResp := new(follow.User)
		if err := GetFollowInfoByUsers(curUser, u, userResp); err != nil {
			resp.StatusCode = -1
			resp.StatusMsg = "Failed to retrieve follow relation"
			c.JSON(consts.StatusInternalServerError, resp)
			hlog.Errorf("Failed to retrieve follow relation: %v", err)
			return
		}
		respList = append(respList, userResp)
	}
	resp.StatusCode = 0
	resp.StatusMsg = "Follow list retrieved successfully"
	resp.UserList = respList

	c.JSON(consts.StatusOK, resp)
}

// FollowerList .
// @router /douyin/relation/follower/list/ [GET]
func FollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req follow.DouyinRelationFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(follow.DouyinRelationFollowerListResponse)

	/* get curUserId */
	var curUserId uint
	if curUserId, err = utils.GetIdFromToken(req.Token); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Invalid token"
		resp.UserList = nil

		c.JSON(consts.StatusUnauthorized, resp)
		return
	}

	curUser := new(model.User)
	if err = model.FindUserById(curUser, curUserId); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Current user id does not exist"
		resp.UserList = nil
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	/* get target User */
	targetUser := new(model.User)
	targetUserId := uint(req.UserId)
	if err = model.FindUserById(targetUser, targetUserId); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Target user id does not exist"
		resp.UserList = nil
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	var uList []*model.User

	if err = model.GetFollowerListByUser(&uList, targetUser); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Failed to get follower list"
		resp.UserList = nil
		c.JSON(consts.StatusInternalServerError, resp)
		hlog.Errorf("Failed to get follower list: %v", err)
		return
	}

	var respList []*follow.User
	for _, u := range uList {
		userResp := new(follow.User)
		if err := GetFollowInfoByUsers(curUser, u, userResp); err != nil {
			resp.StatusCode = -1
			resp.StatusMsg = "Failed to get follower info"
			c.JSON(consts.StatusInternalServerError, resp)
			hlog.Errorf("Failed to get follower info: %v", err)
			return
		}
		respList = append(respList, userResp)
	}
	resp.StatusCode = 0
	resp.StatusMsg = "Follower list retrieved successfully"
	resp.UserList = respList

	c.JSON(consts.StatusOK, resp)
}

// FriendList .
// @router /douyin/relation/friend/list/ [GET]
func FriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req follow.DouyinRelationFriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(follow.DouyinRelationFriendListResponse)

	/* get userId by token*/
	var curUserId uint
	if curUserId, err = utils.GetIdFromToken(req.Token); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Invalid token"
		resp.UserList = nil
		c.JSON(consts.StatusUnauthorized, resp)
		return
	}
	/* get req user*/
	curUser := new(model.User)
	if err = model.FindUserById(curUser, curUserId); err != nil {
		resp.StatusCode = -1
		resp.StatusMsg = "Current user id does not exist"
		resp.UserList = nil
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	/*get friend list*/
	var friend_ids []uint
	model.GetFriendListById(&friend_ids, int64(curUserId))

	var respList []*follow.FriendUser
	for _, id := range friend_ids {
		friendUser := new(follow.FriendUser)

		/*get user*/
		targetUser := new(model.User)
		if err = model.FindUserById(targetUser, id); err != nil {
			resp.StatusCode = -1
			resp.StatusMsg = "Target user id does not exist"
			resp.UserList = nil
			c.JSON(consts.StatusBadRequest, resp)
			return
		}

		/*get userInfo*/
		userInfo := new(follow.User)
		if err := GetFollowInfoByUsers(curUser, targetUser, userInfo); err != nil {
			resp.StatusCode = -1
			resp.StatusMsg = "Failed to get friend info"
			c.JSON(consts.StatusInternalServerError, resp)
			hlog.Errorf("Failed to get friend info: %v", err)
			return
		}

		friendUser.ID = userInfo.ID
		friendUser.Name = userInfo.Name
		friendUser.FollowerCount = userInfo.FollowerCount
		friendUser.FollowCount = userInfo.FollowCount
		friendUser.IsFollow = userInfo.IsFollow
		friendUser.Message = "This is the latest message"
		friendUser.MsgType = 1
		friendUser.Avatar = "http://images.nowcoder.com/head/22t.png"

		respList = append(respList, friendUser)

	}

	resp.StatusCode = 0
	resp.StatusMsg = "Friend list retrieved successfully"
	resp.UserList = respList

	c.JSON(consts.StatusOK, resp)
}
